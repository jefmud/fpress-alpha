####
# FlaskPress Page Main View
#
# Routes and helper functions.
#
# Error handler (handles 404 page not found)
#
# Site route (for slug resolution)
#
# A page slug is a REQUIRED quasi-url that identifies a page route for rendering.
#
# The user specifies the slug during page creation, if not the slug is autogenerated by sluggify title.
#
# The page slug can be:
# 1) A quasi URL "staff/maintenance" ==> /staff/maintenance (leading slash is stripped in the database)
# 2) A user specified name "MyPage" ==> /MyPage (note case will work if user specified)
# 3) A "sluggified" title "A New Page" ==> "a-new-page" (sluggify is sort of a general convention)

from . import app
from flask import abort, flash, g, render_template, session
import datetime
from . import database
from . import details
from . import utils

@app.errorhandler(404)
def page_not_found(e):
    # note that we set the 404 status explicitly
    return render_template('404.html'), 404


@app.template_filter('datetimeformat')
def datetimeformat(value, format='%B %d, %Y'):
    if isinstance(value, str):
        value = datetime.datetime.strptime(value.split('.')[0],'%Y-%m-%d %H:%M:%S')
    return value.strftime(format)

@app.before_request
def before_request():
    """tasks before request is executed"""
    g.db = database.DB

    g.username = session.get('username')
    g.is_authenticated = session.get('is_authenticated')
    g.is_admin = session.get('is_admin')
    # not sure if macro_csrf_token is still needed
    g.macro_csrf_token = utils.token_generator(size=24)
    g.stylesheets = details.stylesheets

    # get the "singular" record of meta data if it exists
    # (it should exist if initialized properly)
    meta = g.db.meta.find_one()
    if meta is None:
        # just in case there was NO meta information!
        meta = {}

    # get this data from flaskpress meta
    g.editor = meta.get('editor', app.config['EDITOR'])
    g.theme = meta.get('theme',app.config['THEME'])
    g.brand = meta.get('brand', app.config['BRAND'])
    g.logo = meta.get('logo', app.config['LOGO'])
    g.stylesheet = meta.get('stylesheet', app.config['STYLESHEET'])

    # menu/categories will be NONE until we generate some content
    g.menu = meta.get('menu')
    g.categories = meta.get('categories')

@app.after_request
def after_request(response):
    """tasks after request is executed, clean-up, etc."""
    return response

def get_featured_pages(exclude_id=None, count=5):
    """gets a fixed number of featured pages -- right now, get the latest"""
    pages = g.db.pages.find()
    candidates = []
    for page in pages:
        if page.get('created_at') and page.get('is_published') \
           and not(page.get('is_sidebar')) and not(page.get('_id')==exclude_id):
            # must have created_at, is_published, and NOT is_sidebar, and NOT excluded
            candidates.append(page)
    candidates = sorted(candidates, key = lambda item: item.get('created_at'), reverse=True)
    if len(candidates) > count:
        return candidates[0:count]
    else:
        return candidates

# this is the general SITE route "catchment" for page view
@app.route("/")
@app.route("/<path:path>")
def site(path=None):
    """view for pages referenced via their slug (which can look like a path
    If you want to modify what happens when an empty path comes in
    See below, it is redirected to "index" view.  This can be changed via code below.
    """

    if path is None:
        """modify here to change behavior of the home-index"""
        # located in the app.cfg settings
        path = app.config['FRONTPAGE_SLUG']

    page = g.db.pages.find_one({'slug': path})
    if page is None:
        abort(404)


    # get sidebars if any come from page object
    sidebar_right = g.db.pages.find_one({'slug':page.get('sidebar_right')})
    sidebar_left = g.db.pages.find_one({'slug':page.get('sidebar_left')})

    ##### removed get shortcodes
    # shortcodes = find_shortcodes(page.get('content'))
    # modify page object with shortcode content directives, return new object
    # page = page_mod_shortcodes(page, shortcodes)
    if page.get('alt_author') is None:
        page['alt_author'] = None
    if page.get('date') is None:
        page['date'] = None

    # get owner's displayname if it exists
    owner = g.db.users.find_one({'username':page.get('owner')})
    if owner:
        page['displayname'] =  owner.get('displayname')

    if page.get('show_snippets'):
        featured_pages = get_featured_pages(exclude_id=page.get('_id'))
    else:
        featured_pages = []

    ## select underlying template
    theme_directory = 'themes/default'
    template_mod = page.get('template')

    if template_mod:
        base_template = 'page_' + template_mod + '.html'
    else:
        base_template = 'page_one_column.html'

    page_template = theme_directory + '/' + base_template

    try:
        return render_template(page_template, page=page, featured_pages=featured_pages,
                               sidebar_right=sidebar_right, sidebar_left=sidebar_left)
    except Exception as e:
        flash("Template <{}> error ==> {}".format(page.get('template'),str(e)), category="danger")
        return render_template('themes/default/page_one_column.html', page=page)
